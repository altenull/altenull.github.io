{"meta":{"title":"Altenull's Blog","subtitle":"IT Blog","description":"Altenull's IT Blog","author":"altenull","url":"http://altenull.github.io"},"pages":[],"posts":[{"title":"웹앱 매니페스트 & 서비스워커(Web App Manifest & Service Worker)","slug":"웹앱-매니페스트-서비스워커-Web-App-Manifest-Service-Worker","date":"2018-03-09T12:10:07.000Z","updated":"2018-03-13T17:05:50.628Z","comments":true,"path":"2018/03/09/웹앱-매니페스트-서비스워커-Web-App-Manifest-Service-Worker/","link":"","permalink":"http://altenull.github.io/2018/03/09/웹앱-매니페스트-서비스워커-Web-App-Manifest-Service-Worker/","excerpt":"","text":"이전 포스트에서 프로그레시브 웹앱(Progressive Web Apps)은 웹과 네이티브 앱이 가진 단점을 개선하는 새로운 형태의 웹앱이라고 설명드렸습니다. 그렇다면, 어떻게 PWA를 개발할 수 있을까요..? 어떠한 웹앱이 PWA가 되기 위해선 여러가지 조건을 충족하여야 하는데요. 그중에서도 특히 웹앱 매니페스트(Web App Manifest)와 서비스워커(Service Worker)는 필수적으로 포함되어야하는 요소입니다. 더 자세히 알아보도록 하겠습니다. 이를 위해 create-react-app으로 프로젝트를 생성하여 진행해보도록 하겠습니다. React 개발환경을 쉽게 구성할 수 있는 create-react-app에는 이미 웹 매니페스트, 서비스워커 등이 상당 부분 구현되어 있어서 이해하기가 훨씬 수월할 것입니다. create-react-app 프로젝트 생성먼저 create-react-app으로 react-pwa라는 샘플 프로젝트를 생성합니다. 1create-react-app react-pwa 위 명령어를 실행하고 나면 react-pwa 폴더가 생성됩니다. 그리고 이 폴더를 열어보면 다음과 같이 프로젝트가 구성되어 있는데요. 여기서 주목해야 할 것은 manifest.json과 registerServiceWorker.js 입니다. 먼저 웹앱 매니페스트(Web App Manifest)부터 알아보겠습니다. 웹앱 매니페스트(Web App Manifest)웹앱 매니페스트란 앱에 대한 정보를 담고 JSON 파일입니다. 배경색은 어떠한 색인지, 앱의 이름은 무엇인지, 홈스크린 화면에 추가할 때 아이콘은 어떤 것인지 등의 정보를 담고 있죠. 웹앱 매니페스트는 manifest.json 파일명을 대부분 사용합니다. manifest.json 123456789101112131415&#123; \"short_name\": \"React App\", \"name\": \"Create React App Sample\", \"icons\": [ &#123; \"src\": \"favicon.ico\", \"sizes\": \"64x64 32x32 24x24 16x16\", \"type\": \"image/x-icon\" &#125; ], \"start_url\": \"./index.html\", \"display\": \"standalone\", \"theme_color\": \"#000000\", \"background_color\": \"#ffffff\"&#125; 항목별 설명 short_name: 사용자 홈 화면에서 아이콘 이름으로 사용 name: 웹앱 설치 배너에 사용 icons: 홈 화면에 추가할때 사용할 이미지 start_url: 웹앱 실행시 시작되는 URL 주소 display: 디스플레이 유형(fullscreen, standalone, browser 중 설정) theme_color: 상단 툴바의 색상 background_color: 스플래시 화면 배경 색상 orientation: 특정 방향을 강제로 지정(landscape, portrait 중 설정) 서비스워커(Service Worker)서비스워커는 브라우저의 백그라운드에서 실행되는 자바스크립트 워커입니다. PWA는 네이티브 앱처럼 오프라인 상태에서도 사용가능하고, 푸시 알림(Notification) 기능도 사용할 수 있는데요. 이런 기능을 할 수 있도록 도와주는 것이 바로 서비스워커입니다. 향후에는 서비스워커에 지오펜싱(Geofencing)과 같은 기능이 추가될 예정이라고 합니다. 생명주기(Life Cycle)서비스워커는 다음과 같은 생명주기를 가집니다. 서비스워커를 설치하기 위해서는 먼저 등록을 해야하는데요. 서비스워커 등록 코드는 registerServiceWorker.js에 이미 구현이 되어있습니다. 등록을 하게 되면 브라우저가 백그라운드에서 서비스워커 설치를 시작하게 됩니다. 설치단계 동안에는 정적자원을 캐싱하는 작업을 진행하게 되고, 모든 정적자원의 캐싱이 완료되면 비로소 서비스워커 설치가 끝납니다. 이렇게 서비스워커가 설치 되고, 활성화되고 나면 비로소 서비스워커가 기능을 할 수 있게됩니다. 서비스워커 등록 과정registerServiceWorker.js에 구현되어 있는 register(), registerValidSW() 함수입니다. registerServiceWorker.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364(...)export default function register() &#123; if (process.env.NODE_ENV === 'production' &amp;&amp; 'serviceWorker' in navigator) &#123; // The URL constructor is available in all browsers that support SW. const publicUrl = new URL(process.env.PUBLIC_URL, window.location); if (publicUrl.origin !== window.location.origin) &#123; // Our service worker won't work if PUBLIC_URL is on a different origin // from what our page is served on. This might happen if a CDN is used to // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374 return; &#125; window.addEventListener('load', () =&gt; &#123; const swUrl = `$&#123;process.env.PUBLIC_URL&#125;/service-worker.js`; if (isLocalhost) &#123; // This is running on localhost. Lets check if a service worker still exists or not. checkValidServiceWorker(swUrl); // Add some additional logging to localhost, pointing developers to the // service worker/PWA documentation. navigator.serviceWorker.ready.then(() =&gt; &#123; console.log( 'This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://goo.gl/SC7cgQ' ); &#125;); &#125; else &#123; // Is not local host. Just register service worker registerValidSW(swUrl); &#125; &#125;); &#125;&#125;function registerValidSW(swUrl) &#123; navigator.serviceWorker .register(swUrl) .then(registration =&gt; &#123; registration.onupdatefound = () =&gt; &#123; const installingWorker = registration.installing; installingWorker.onstatechange = () =&gt; &#123; if (installingWorker.state === 'installed') &#123; if (navigator.serviceWorker.controller) &#123; // At this point, the old content will have been purged and // the fresh content will have been added to the cache. // It's the perfect time to display a \"New content is // available; please refresh.\" message in your web app. console.log('New content is available; please refresh.'); &#125; else &#123; // At this point, everything has been precached. // It's the perfect time to display a // \"Content is cached for offline use.\" message. console.log('Content is cached for offline use.'); &#125; &#125; &#125;; &#125;; &#125;) .catch(error =&gt; &#123; console.error('Error during service worker registration:', error); &#125;);&#125;(...) register(), registerValidSW() 두 함수에 서비스워커 등록이 잘 되는지 파악하기 위해 console.log() 함수를 각각 추가해보겠습니다. 123456789101112131415161718(...)export default function register() &#123; if (process.env.NODE_ENV === 'production' &amp;&amp; 'serviceWorker' in navigator) &#123; (...) &#125; else &#123; // 이곳! (else문 추가) console.log(\"won't register serviceWorker. Current env:\", process.env.NODE_ENV); &#125;&#125;function registerValidSW(swUrl) &#123; navigator.serviceWorker .register(swUrl) .then(registration =&gt; &#123; console.log('serviceWorker is registered'); // 이곳! registration.onupdatefound = () =&gt; &#123; (...)&#125;(...) 수정이 완료되고 나면 다음 명령어로 프로젝트를 실행해봅니다. 123yarn start혹은npm run start 성공적으로 실행하고 나면, 크롬 브라우저를 열고 localhost:3000에 접속한 뒤, console 창을 확인합니다. 그러면 development 레벨이기 때문에 서비스워커를 등록할 수 없다는 메시지를 확인할 수 있습니다. 프로젝트를 production 레벨로 실행하기 위하여 yarn build 혹은 npm run build 명령어로 빌드를 하고 파이어베이스로 호스팅해보았습니다.(과정 생략)호스팅을 한 링크로 접속하고 console 창을 확인해보면 다음과 같이 서비스워커가 등록되었다는 메시지를 확인할 수 있습니다.(호스팅 링크) 실제 서비스워커는 개발자도구(F12)의 Application 탭에서 Service Workers 메뉴에서 확인가능 합니다. 정적 자원 캐싱서비스워커 설치단계에서는 정적 자원을 캐싱한다고 설명드렸습니다. 캐싱이 완료되고 나면 어떠한 일이 벌어지는지 알아보겠습니다. 최초 접속파이어베이스로 호스팅을 하고 난 뒤, 최초 접속했을 때에 Network 탭 화면입니다. 번들링된 css, js 파일 등을 서버로부터 다운로드하는데요. Size와 Time부분을 주목해주세요. 재접속다음은 새로고침(F5)을 하고 나서 캡처한 Network 탭 화면입니다. Size와 Time이 이전과 많이 달라졌네요. 시간은 크게 줄어들었고, 특히 Size가 (from ServiceWorker)로 바뀌었습니다. 서비스워커는 설치되고 나면 브라우저와 서버 중간에 위치해 브라우저에서 보내는 요청들을 검사합니다. 이 때 요청에 대한 응답, 즉 자원이 캐싱되어 있다면 굳이 서버에서 받을 필요 없이 캐싱된 자원을 리턴합니다. 그렇기 때문에 응답시간도 현저히 줄어든 것입니다. Network Disconnect 이번에는 네트워크 연결을 해제하고 접속해보겠습니다. 사용중인 와이파이를 꺼주시거나, 개발자도구(F12) - Application - Service Workers에서 offline을 체크하고 다시 접속해봅니다. 그러면 404 Not Found가 뜨지 않고 네트워크가 연결되어 있을 때와 동일한 페이지를 보실 수 있으실 겁니다. 왜냐하면 지금 보여지고 있는 자원들은 서버에서 받은 자원이 아닌 서비스워커로부터 받은 캐싱된 자원이기 때문입니다. 마치며이번 포스트에서는 웹앱 매니페스트(Web App Manifest)와 서비스워커(Service Worker)에 대해서 알아보았습니다. 설명이 부족하기도 했고 더 많은 기능을 소개하지도 못했지만, PWA를 처음 접하시는 분들에게 조금이나마 도움이 되셨으면 좋겠습니다. 참고 Google Developers - Service Workers Google Developers - Web App Manifest Google Developers - App Install Banners","categories":[{"name":"Web","slug":"Web","permalink":"http://altenull.github.io/categories/Web/"},{"name":"PWA","slug":"Web/PWA","permalink":"http://altenull.github.io/categories/Web/PWA/"}],"tags":[{"name":"PWA","slug":"PWA","permalink":"http://altenull.github.io/tags/PWA/"},{"name":"Web App Manifest","slug":"Web-App-Manifest","permalink":"http://altenull.github.io/tags/Web-App-Manifest/"},{"name":"Service Worker","slug":"Service-Worker","permalink":"http://altenull.github.io/tags/Service-Worker/"}]},{"title":"프로그레시브 웹앱(Progressive Web Apps)이란?","slug":"프로그레시브-웹-앱-Progressive-Web-Apps-란","date":"2018-02-25T14:23:56.000Z","updated":"2018-03-13T16:57:46.238Z","comments":true,"path":"2018/02/25/프로그레시브-웹-앱-Progressive-Web-Apps-란/","link":"","permalink":"http://altenull.github.io/2018/02/25/프로그레시브-웹-앱-Progressive-Web-Apps-란/","excerpt":"","text":"프로그레시브 웹앱(Progressive Web Apps)은 Google I/O 2016에서 소개된 미래의 웹기술이며, PWA라고 줄여서 부르기도 합니다. 먼저 구글에서 소개하는 PWA는 이러합니다. PWA는 최고의 웹과 최고의 앱을 결합한 경험이다. 브라우저를 통해 처음 방문한 사용자에게 유용하며, 설치가 필요하지 않다. 사용자가 PWA와 관계를 점진적으로 형성할수록 성능이 더욱 강력해 질 것이다. 느린 네트워크에서도 빠르게 로드되고, 관련된 푸시 알림을 전송한다. 모바일 앱처럼 전체 화면으로 로드되고, 홈 화면에 아이콘이 있다. 쉽게 말하자면, PWA는 모바일 앱과 웹 기술의 장점을 결합한 것이라고 볼 수 있습니다. 왜 PWA인가?먼저 몇 가지 통계를 살펴보겠습니다. 2014년을 기점으로 모바일 사용자 수가 데스크탑 사용자 수를 넘어섰군요. 그리고 모바일 사용자의 87%는 웹보다 네이티브 앱에서 더 많은 시간을 보냅니다. 왜 모바일 사용자 대부분은 웹보다 네이티브 앱에서 훨씬 더 많은 시간을 보내는 것일까요? 이 질문에 대해서 사용자들은 보통 2가지 장점을 이야기합니다. 홈 스크린(Home Screen)에 아이콘이 있어서 찾기가 쉽다는 점. 관련된 푸시 알람(Notification)을 보내준다는 점. 그렇다면 ‘네이티브 앱만 개발하고 서비스하면 되지 않나? 굳이 왜 웹을 만들지..?’라고 생각할 수 있는데요. 곧 생각이 달라질 것입니다. 모바일 사용자의 월간 앱 다운로드 수를 보여주는 통계입니다. 50% 이상의 사용자는 앱을 전혀 다운로드 하지 않습니다. 그리고, 특정 3개의 앱에서 사용시간의 77%를 보냅니다.(49% + 18% + 10%) 즉, 모바일 사용자는 새로운 앱을 다운로드하는 것에는 냉소적이며, 사용하던 앱을 계속해서 사용하는 경향이 있음을 알 수 있습니다. 그러면 웹 진영은 어떠할까요? 네이티브 앱 다운로드 수가 0개에 가까운 것에 비해, 모바일 사용자들은 한 달에 평균 100개 이상의 웹사이트를 방문한다고 합니다. 차이가 굉장히 크네요. 이 차이를 만들어 내는 것은 바로 URL이 가지고 있는 힘 때문이라고 할 수 있습니다. 어떠한 웹사이트에 접속하기 위해서는 브라우저에 URL만 입력하면 되기 때문이죠. 매우 간단합니다. 반면에 네이티브 앱을 사용하기 위해서는 앱 마켓에서 검색을 한 뒤, 다운로드를 해야합니다. 게다가 용량이 큰 앱이라면 다운로드가 완료될 때까지 기다려야 하는 불편함이 존재하죠. 웹에 비해 상당히 번거롭습니다. 지금까지의 내용을 바탕으로 네이티브 앱과 웹을 비교해보겠습니다. 네이티브 앱은 설치하는데에 드는 시간과 비용이 큽니다. 하지만 웹은 설치가 필요하지 않고, URL을 통한 접근이 아주 간단합니다. 웹은 사용자가 한 번 사용하기에는 편리하지만, 반복해서 사용할 시에는 매 번 URL을 기억하고 입력해야 하는 수고가 듭니다. 이에 반해 네이티브 앱은 한 번 설치하고 나면 독자적인 아이콘을 통해 반복적으로 접근하는 것이 수월합니다. 네이티브 앱은 플랫폼(안드로이드, iOS)에 종속되어 개발하는데에 많은 시간과 노력이 필요합니다. 하지만 웹은 플랫폼에 종속되지 않습니다. 웹은 네트워크가 연결되어 있지 않을 시에는 사용이 불가능합니다. 하지만 네이티브 앱은 오프라인 상태에서도 작동합니다. 이제 PWA에 대해 조금 감이 잡히지 않으시나요..? 다시 한 번 강조해보겠습니다. 네이티브 앱은 느린 네트워크에서도 작동하며, 백그라운드에서 푸시 알람을 보내줍니다. 또한, 카메라, 마이크 등에도 쉽게 접근하여 다양한 기능을 수행할 수 있습니다. 즉, Capability(능력)가 뛰어나다라고 할 수 있죠. 웹은 URL을 통한 접근이 간단하고, 설치 과정이 없습니다. 즉, Reach(범위)가 넓다라고 할 수 있습니다. 이는 다음 그림처럼 시각화 할 수 있습니다. 그리고 네이티브 앱과 웹의 장점을 결합한 PWA는 이쯤에 위치시킬 수 있겠네요. 정리지금까지 내용을 종합해보면, 프로그레시브 웹앱(PWA)은 다음과 같이 요약할 수 있습니다. PWA는 네이티브 앱과 웹의 단점을 개선할 수 있다. PWA는 네이티브 앱과 같은 사용자 경험을 제공하는 웹앱이다. PWA는 사용자 경험의 품질을 근본적으로 향상시키는 것을 의미한다. 마치며이번 포스트에서는 PWA가 탄생하게 된 배경과 무엇을 개선하려고 하는지를 소개하는데에 초점을 맞췄습니다. 다음 포스트에서는 PWA에 대한 정보를 담고 있는 웹앱 매니페스트(Web App Manifest)와 오프라인 상태에서도 동작을 가능하게 하는 서비스워커(Service Worker) 등을 차근차근 알아가 보도록 하겠습니다. 참고 Google Developers - Progressive Web Apps Youtube - PWA Roadshow comScore 통계","categories":[{"name":"Web","slug":"Web","permalink":"http://altenull.github.io/categories/Web/"},{"name":"PWA","slug":"Web/PWA","permalink":"http://altenull.github.io/categories/Web/PWA/"}],"tags":[{"name":"PWA","slug":"PWA","permalink":"http://altenull.github.io/tags/PWA/"},{"name":"프로그레시브 웹앱","slug":"프로그레시브-웹앱","permalink":"http://altenull.github.io/tags/프로그레시브-웹앱/"},{"name":"PROGRESSIVE WEB APPS","slug":"PROGRESSIVE-WEB-APPS","permalink":"http://altenull.github.io/tags/PROGRESSIVE-WEB-APPS/"}]},{"title":"Hexo 블로그 개설!","slug":"Hexo-블로그-개설","date":"2018-02-19T08:24:32.000Z","updated":"2018-03-13T16:57:47.464Z","comments":true,"path":"2018/02/19/Hexo-블로그-개설/","link":"","permalink":"http://altenull.github.io/2018/02/19/Hexo-블로그-개설/","excerpt":"","text":"정적 블로그 프레임워크인 Hexo를 사용해서 블로그를 개설했다. AWS에서 Wordpress 플러그인으로 블로그를 만들어 보았는데, 도메인도 구입해야 하고 EC2 사용료도 내야해서 이것저것 찾아보다가 Hexo를 발견했다. Hexo는 Github pages를 통해서 무료로 호스팅할 수 있고, Node.js 기반이라고 하여서 선택. Hexo를 통해 블로그를 운영하다보면 뭔가 Node에 익숙해질 것 같은 느낌을 받았고, 마크다운 문법도 더 잘 쓸 것 같았기 때문이다. 그리고 hueman 테마도 깔끔해서 만족스럽다.","categories":[{"name":"Life","slug":"Life","permalink":"http://altenull.github.io/categories/Life/"},{"name":"생각그릇","slug":"Life/생각그릇","permalink":"http://altenull.github.io/categories/Life/생각그릇/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"http://altenull.github.io/tags/HEXO/"},{"name":"BLOG","slug":"BLOG","permalink":"http://altenull.github.io/tags/BLOG/"}]}]}